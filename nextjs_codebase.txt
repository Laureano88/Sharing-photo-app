Instrucciones para el Análisis del Proyecto Next.js 14:

1. Este es un proyecto Next.js 14 que utiliza el App Router
2. Aspectos clave a considerar:
   - Estructura de carpetas app/
   - Server y Client Components
   - Archivos especiales (page, layout, loading, error)
   - API Routes y manejo de datos
   - Patrones de optimización y renderizado
3. La aplicación utiliza:
   - Server Components por defecto
   - TypeScript
   - Estructuras de datos y estado
4. Usa este contexto para responder preguntas sobre la aplicación


================================================================================
ESTRUCTURA DEL PROYECTO NEXT.JS 14
================================================================================



================================================================================
SECCIÓN: COMPONENTS
================================================================================


### Archivo: src\app\components\AdminPanel.jsx ###
--------------------------------------------------------------------------------
// src/components/AdminPanel.js

import React, { useState, useEffect } from 'react';
import { supabase } from '../utils/supabaseClient';
import { useRouter } from 'next/router';

const AdminPanel = () => {
  const [uploads, setUploads] = useState([]);
  const [loading, setLoading] = useState(true);
  const [authUser, setAuthUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const fetchSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setAuthUser(session?.user ?? null);
      if (session) {
        fetchPendingUploads();
      } else {
        router.push('/admin/login');
      }
    };

    fetchSession();

    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        setAuthUser(session?.user ?? null);
        if (session) {
          fetchPendingUploads();
        } else {
          setUploads([]);
          router.push('/admin/login');
        }
      }
    );

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const fetchPendingUploads = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('uploads')
      .select('*')
      .eq('approved', false)
      .order('created_at', { ascending: true });

 
    if (error) {
      console.error('Error al obtener las fotos pendientes:', error);
      alert('Hubo un problema al obtener las fotos pendientes.');
    } else {
      setUploads(data);
    }
    setLoading(false);
  };

  const approveUpload = async (id) => {
    const { error } = await supabase
      .from('uploads')
      .update({ approved: true })
      .eq('id', id);

    if (error) {
      console.error('Error al aprobar la foto:', error);
      alert('Hubo un problema al aprobar la foto.');
    } else {
      alert('Foto aprobada.');
      fetchPendingUploads();
    }
  };

  const deleteUpload = async (id, image_url) => {
    // Extraer el path de la URL de la imagen
    const imagePath = image_url.split('/storage/v1/object/public/photos/')[1];

    // Eliminar el registro de la base de datos
    const { error: deleteError } = await supabase
      .from('uploads')
      .delete()
      .eq('id', id);

    if (deleteError) {
      console.error('Error al eliminar el registro:', deleteError);
      alert('Hubo un problema al eliminar la foto.');
      return;
    }

    // Eliminar la imagen del almacenamiento
    const { error: storageError } = await supabase.storage
      .from('photos')
      .remove([imagePath]);

    if (storageError) {
      console.error('Error al eliminar la imagen:', storageError);
      alert('Hubo un problema al eliminar la imagen.');
    } else {
      alert('Foto eliminada.');
      fetchPendingUploads();
    }
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    router.push('/admin/login');
  };

  if (!authUser) {
    return null; // Mientras se redirige, no renderizar nada
  }

  return (
    <div className={styles.adminContainer}>
      <h2>Panel de Administración</h2>
      <button onClick={handleLogout} className={styles.logoutButton}>
        Cerrar Sesión
      </button>
      {loading ? (
        <p>Cargando fotos pendientes...</p>
      ) : uploads.length === 0 ? (
        <p>No hay fotos pendientes de aprobación.</p>
      ) : (
        <div className={styles.uploadsList}>
          {uploads.map((upload) => (
            <div key={upload.id} className={styles.uploadItem}>
              <img src={upload.image_url} alt="Foto pendiente" />
              <p>{upload.comment || 'Sin comentario'}</p>
              <div className={styles.actions}>
                <button onClick={() => approveUpload(upload.id)} className={styles.approveButton}>
                  Aprobar
                </button>
                <button
                  onClick={() => deleteUpload(upload.id, upload.image_url)}
                  className={styles.deleteButton}
                >
                  Eliminar
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default AdminPanel;

--------------------------------------------------------------------------------

### Archivo: src\app\components\CameraIcon.jsx ###
--------------------------------------------------------------------------------
const CameraIcon = () => (
    <svg
      width="48"
      height="48"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className="mx-auto text-purple-200/70"
    >
      <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" />
      <circle cx="12" cy="13" r="3" />
    </svg>
  );
  
  export default CameraIcon;
--------------------------------------------------------------------------------

### Archivo: src\app\components\FloatingEmoji.jsx ###
--------------------------------------------------------------------------------
const FloatingEmoji = ({ item }) => (
    <div
      className="floating-item"
      style={{
        left: item.left,
        animationDuration: item.animationDuration,
        fontSize: item.size,
      }}
    >
      {item.emoji}
    </div>
  );
--------------------------------------------------------------------------------

### Archivo: src\app\components\FullScreenButton.jsx ###
--------------------------------------------------------------------------------
import { FaExpand, FaCompress } from 'react-icons/fa';

const FullscreenButton = ({ isFullscreen, onClick }) => (
  <button
    onClick={onClick}
    className="fullscreen-button"
    aria-label={isFullscreen ? 'Salir de pantalla completa' : 'Ver en pantalla completa'}
  >
    {isFullscreen ? <FaCompress size={24} /> : <FaExpand size={24} />}
  </button>
);

export default FullscreenButton
--------------------------------------------------------------------------------

### Archivo: src\app\components\LoginForm.jsx ###
# Client Component
--------------------------------------------------------------------------------
// src/components/LoginForm.js
"use client"
import React, { useState } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useRouter } from 'next/navigation';


const LoginForm = () => {

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const router = useRouter();
  const supabase = createClientComponentClient();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError(null);

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      console.error('Error al iniciar sesión:', error);
      setError(error.message);
    } else {
      router.push('/admin/dashboard'); 
    }
  };


  return (
    <div className="max-w-md mx-auto bg-gray-800 rounded-lg shadow-md p-6">
      <form onSubmit={handleLogin}>
        <input
          type="email"
          value={email}
          placeholder="Correo electrónico"
          onChange={(e) => setEmail(e.target.value)}
          className="w-full p-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        />
        <input
          type="password"
          value={password}
          placeholder="Contraseña"
          onChange={(e) => setPassword(e.target.value)}
          className="w-full p-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-md mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        />
        {error && <p className="text-red-400 text-sm mb-4">{error}</p>}
        <button
          type="submit"
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md transition"
        >
          Iniciar Sesión
        </button>
      </form>
    </div>
  );
};

export default LoginForm;
--------------------------------------------------------------------------------

### Archivo: src\app\components\Navbar.jsx ###
--------------------------------------------------------------------------------
// src/components/Navbar.jsx

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';

const Navbar = () => {
  return (
    <nav className="bg-primary-dark text-white py-4">
      <div className="container mx-auto flex justify-between items-center px-4">
        <Link href="/">
        <Image
            src="/logo.png" // Ruta relativa a la carpeta public
            alt="Logo"
            width={60} // Ajusta el ancho del logo
            height={50}  // Ajusta el alto del logo
          />
        </Link>
        <div className="space-x-4">
          <Link href="/">
          Inicio
          </Link>
          <Link href="/carousel/">
            Carousel
          </Link>
          <Link href="/admin/">
            Admin
          </Link>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

--------------------------------------------------------------------------------

### Archivo: src\app\components\QRCode.jsx ###
--------------------------------------------------------------------------------
import { QRCodeSVG } from 'qrcode.react';

const QRCode = ({ url }) => (
  <div className="p-4 rounded-2xl">
    <h3 
      className="text-white text-2xl font-bold mb-3 text-center animate-pulse"
      style={{
        textShadow: `
          0 0 10px rgba(255,255,255,0.4),
          0 0 20px rgba(255,255,255,0.2)
        `,
        background: 'linear-gradient(to right, #fff, #e0e0e0, #fff)',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent',
        backgroundSize: '200% auto',
        animation: 'shine 3s linear infinite'
      }}
    >
      ¡Dejanos tu Selfi!
    </h3>
    <div 
      style={{
        filter: `
          drop-shadow(0 0 10px rgba(255,255,255,0.3))
          drop-shadow(0 0 20px rgba(255,255,255,0.2))
        `,
        transition: 'all 0.3s ease'
      }}
      className="hover:brightness-110 hover:scale-105"
    >
      <QRCodeSVG
        value={url}
        size={230}
        bgColor="white"
        fgColor="#000000"
        level="L"
        className="rounded-lg"
      />
    </div>
    <style jsx>{`
      @keyframes shine {
        to {
          backgroundPosition: 200% center;
        }
      }
    `}</style>
  </div>
);

export default QRCode;
--------------------------------------------------------------------------------

### Archivo: src\app\components\RippleButton.jsx ###
# Client Component
--------------------------------------------------------------------------------
"use client"

import React from 'react';
import Ripples from 'react-ripples';
import PropTypes from 'prop-types';

const RippleButton = ({ 
  children, 
  onClick, 
  className = '', 
  disabled = false,
  rippleColor = "rgba(255, 255, 255, 0.2)",
  rippleDuring = 800,
  type = "button"
}) => (
  <Ripples 
    className="w-full h-full block rounded-[inherit] overflow-hidden" // Forzar la herencia de los bordes redondeados y evitar que se cambien estilos no deseados
    color={rippleColor}
    during={rippleDuring}
    disabled={disabled}
  >
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`w-full h-full ${className}`} // Asegura que el botón mantenga el tamaño correcto
    >
      {children}
    </button>
  </Ripples>
);

RippleButton.propTypes = {
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  rippleColor: PropTypes.string,
  rippleDuring: PropTypes.number,
  type: PropTypes.oneOf(['button', 'submit', 'reset'])
};

export default RippleButton;

--------------------------------------------------------------------------------

### Archivo: src\app\components\UploadPhoto.jsx ###
# Client Component
--------------------------------------------------------------------------------
"use client"

import React, { useState } from 'react';
import imageCompression from 'browser-image-compression';
import { supabase } from '../utils/supabaseClient';
import { FaTimes } from 'react-icons/fa';
import { toast } from 'react-toastify';
import Image from 'next/image';
import CameraIcon from './CameraIcon';

const UploadPhoto = () => {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [comment, setComment] = useState('');
  const [uploading, setUploading] = useState(false);

  const handleFileChange = async (e) => {
    const selectedFile = e.target.files?.[0];

    if (selectedFile && selectedFile.type.startsWith('image/')) {
      try {
        const options = {
          maxSizeMB: 3,
          maxWidthOrHeight: 1080,
          useWebWorker: true,
        };

        const compressedFile = await imageCompression(selectedFile, options);
        setFile(compressedFile);
        setPreview(URL.createObjectURL(compressedFile));
      } catch (error) {
        console.error('Error al comprimir la imagen:', error);
        toast.error('Hubo un problema al comprimir la imagen.');
      }
    } else {
      toast.error('Por favor, selecciona un archivo de imagen válido.');
      setFile(null);
      setPreview(null);
    }
  };

  const handleRemovePhoto = () => {
    setFile(null);
    setPreview(null);
    const input = document.getElementById('photo-input');
    if (input) input.value = '';
  };

  const handleUpload = async () => {
    if (!file) {
      toast.error('Por favor, selecciona una foto antes de compartir.');
      return;
    }

    setUploading(true);

    const fileName = `${Date.now()}_${file.name}`;

    const { data, error } = await supabase.storage
      .from('photos')
      .upload(fileName, file);

    if (error) {
      console.error('Error al subir la foto:', error);
      toast.error('Hubo un problema al compartir la foto. Por favor, inténtalo de nuevo.');
      setUploading(false);
      return;
    }

    const { data: publicUrlData } = supabase.storage
      .from('photos')
      .getPublicUrl(data.path);

    const imageUrl = publicUrlData.publicUrl;

    const { error: insertError } = await supabase
      .from('uploads')
      .insert([{ image_url: imageUrl, comment: comment }]);

    if (insertError) {
      console.error('Error al insertar en la base de datos:', insertError);
      toast.error('Hubo un problema al compartir la foto. Por favor, inténtalo de nuevo.');
    } else {
      toast.success('¡Foto compartida exitosamente! Pendiente de aprobación.');
      setFile(null);
      setPreview(null);
      setComment('');
    }

    setUploading(false);
  };

  return (
    <div className="h-[100dvh] flex flex-col px-4 max-w-md mx-auto">
      {/* Top section with logo - reduced margin */}
      <div className="flex-none flex justify-center">
        <div className="p-2 rounded-full">
          <Image 
            src="/logo-form.png" 
            width={100}
            height={100}
            alt="Logo"
            className="object-contain"
            priority
          />
        </div>
      </div>

      {/* Main content area */}
      <div className="flex-1 flex flex-col gap-3 h-full">
        <input
          type="file"
          id="photo-input"
          accept="image/*"
          className="hidden"
          onChange={handleFileChange}
        />

        {/* Image preview/upload area - adjusted height */}
        <div className="relative flex-1 max-h-[72%]">
          <button
            onClick={() => document.getElementById('photo-input').click()}
            className="w-full h-full bg-purple-800/20 rounded-3xl  backdrop-blur-md border border-white/10 flex flex-col items-center justify-center overflow-hidden transition-all hover:bg-purple-800/30 hover:border-white/20 shadow-lg active:scale-95" // Escala al presionar
          >
            {preview ? (
              <>
                <div className="w-full h-full aspect-[4/3]">
                  <img
                    src={preview}
                    alt="Vista previa"
                    className="object-cover w-full h-full rounded-3xl transition-transform duration-300 ease-in-out hover:scale-105" // Transición de escala al hacer hover
                  />
                </div>
                <button
                  onClick={handleRemovePhoto}
                  className="absolute top-3 right-3 w-9 h-9 bg-black/50 hover:bg-black/70 backdrop-blur-md rounded-full flex items-center justify-center text-white transition-all border border-white/10"
                  aria-label="Eliminar foto"
                >
                  <FaTimes className="text-lg" />
                </button>
              </>
            ) : (
              <div className="text-center p-4 space-y-2">
                <div className="inline-block border border-white/20 p-4 rounded-full bg-purple-800/20 animate-pulse"> {/* Animación de pulso */}
                  <CameraIcon className="w-6 h-6 text-white" />
                </div>
                <p className="text-white/90 text-sm px-3 font-medium">
                  Saca una selfie y compartila con nosotros!
                </p>
              </div>
            )}
          </button>
        </div>

        {/* Comment input - reduced height */}
        <div className="flex-none h-[12%]">
          <textarea
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            placeholder="Agrega un comentario..."
            className="w-full h-full p-3 bg-purple-800/20 backdrop-blur-md text-white placeholder-white/50 rounded-xl border border-white/10 focus:outline-none focus:ring-2 focus:ring-white/25 transition-all hover:bg-purple-800/30 focus:bg-purple-800/30" // Hover y Focus transitions
          />
        </div>

        {/* Share button - adjusted padding and margin */}
        <div className="flex-none mb-4">
          <button
            onClick={handleUpload}
            disabled={uploading}
            className={`w-full py-3 rounded-xl text-white font-medium transition-all shadow-lg border border-white/10 active:scale-95 ${ // Escala al presionar
              uploading 
                ? 'bg-gray-500/50 cursor-not-allowed' 
                : 'bg-pink-600 hover:bg-pink-700 active:bg-pink-700'
            }`}
          >
            {uploading ? 'Compartiendo...' : 'Compartir selfie'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default UploadPhoto;

--------------------------------------------------------------------------------

### Archivo: src\app\components\CommentBubble\CommentBubble.jsx ###
--------------------------------------------------------------------------------
import { useEffect, useState } from 'react';
import styles from './styles.module.css';

const DEFAULT_COMMENT = '❤️ ❤️ ❤️';

const CommentBubble = ({ comment }) => {
  const [displayedComment, setDisplayedComment] = useState('');
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isGlowing, setIsGlowing] = useState(false);

  useEffect(() => {
    setIsTransitioning(true);
    setTimeout(() => {
      setDisplayedComment(comment || DEFAULT_COMMENT);
      setIsTransitioning(false);
    }, 300);
  }, [comment]);

  // Efecto de destello aleatorio
  useEffect(() => {
    const glowInterval = setInterval(() => {
      setIsGlowing(true);
      setTimeout(() => setIsGlowing(false), 1000);
    }, Math.random() * 5000 + 3000); // Entre 3 y 8 segundos

    return () => clearInterval(glowInterval);
  }, []);

  return (
    <div className={`
      ${styles.commentBubble} 
      ${styles.floating}
    `}>
      <div className={`
        ${styles.bubbleContent}
        ${isGlowing ? styles.glow : ''}
      `}>
        <div className={styles.glowEffect} />
        
        <p className={`
          ${styles.commentText} 
          ${isTransitioning ? styles.fadeOut : styles.fadeIn}
        `}>
          {displayedComment}
        </p>

        <div className={styles.decorationTop} />
        <div className={styles.decorationBottom} />
      </div>
    </div>
  );
};

export default CommentBubble;
--------------------------------------------------------------------------------

### Archivo: src\app\components\DeviceCarousel\DeviceCarousel.jsx ###
--------------------------------------------------------------------------------
import React, { useMemo } from 'react';
import { DeviceFrameset } from "react-device-frameset";
import { Swiper, SwiperSlide } from "swiper/react";
import { Autoplay, EffectFade } from "swiper/modules";
import Image from "next/image";
import styles from './styles.module.css';
import "swiper/css";
import "swiper/css/effect-fade";
import "react-device-frameset/styles/marvel-devices.min.css";

const DeviceCarousel = ({
  photos,
  deviceConfig,
  onSlideChange,
  width,
  height,
}) => {
  const calculatedZoom = useMemo(() => {
    const viewportRatio = height / width;
    const deviceRatio = deviceConfig.height / deviceConfig.width;
      
    let zoom;
    if (viewportRatio > deviceRatio) {
      zoom = (width * 0.85) / deviceConfig.width; // Reducimos de 0.97 a 0.85 para hacer el device más grande
    } else {
      zoom = (height * 0.85) / deviceConfig.height;
    }
      
    return Math.min(Math.max(zoom, 0.788), 1.); // Aumentamos los límites del zoom
  }, [width, height, deviceConfig]);


  return (
    <div className="relative flex w-full h-full">
      {/* Dispositivo centrado */}
      <div className="flex justify-center items-center w-full">
        <div className={styles.deviceWrapper}>
          <DeviceFrameset 
            device={deviceConfig.device}
            color={deviceConfig.color}
            zoom={calculatedZoom}
            orientation="portrait"
          >
            <div className={styles.swiperContainer}>
              <Swiper
                effect="fade"
                autoplay={{
                  delay: 5000,
                  disableOnInteraction: false,
                }}
                modules={[Autoplay, EffectFade]}
                onSlideChange={onSlideChange}
                className={styles.swiper}
              >
                {photos.map((photo) => (
                  <SwiperSlide key={photo.id} className={styles.slide}>
                    <div className={styles.imageContainer}>
                      <Image
                        src={photo.image_url}
                        alt={photo.comment || 'Foto del evento'}
                        fill
                        priority
                        sizes="100vw"
                        className={styles.image}
                      />
                    </div>
                  </SwiperSlide>
                ))}
              </Swiper>
            </div>
          </DeviceFrameset>
        </div>
      </div>
    </div>
  );
};

export default DeviceCarousel;
--------------------------------------------------------------------------------

### Archivo: src\app\components\DeviceCarousel\config.ts ###
--------------------------------------------------------------------------------
export const DEVICE_CONFIGS = {
  iPadMini: {
    device: "iPad Mini",
    color: "silver",
    width: 768,
    height: 1024,
    aspectRatio: 0.75,
    defaultZoom: 1.2, // Aumentamos el zoom por defecto
  },
};
--------------------------------------------------------------------------------

### Archivo: src\app\components\DeviceCarousel\types.ts ###
--------------------------------------------------------------------------------
// src/components/DeviceCarousel/types.ts
export type PhotoType = {
    id: string;
    image_url: string;
    comment?: string;
  };
  
  export type DeviceConfig = {
    device: string;
    color: string;
    defaultZoom: number;
    width: number;
    height: number;
  };
  
  export type DeviceCarouselProps = {
    photos: PhotoType[];
    deviceConfig: DeviceConfig;
    isFullscreen?: boolean;
    width: number;
    height: number;
  };
--------------------------------------------------------------------------------


================================================================================
SECCIÓN: LIB
================================================================================


### Archivo: src\app\utils\supabaseClient.jsx ###
--------------------------------------------------------------------------------
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

 const supabase = createClientComponentClient({
  supabaseUrl: supabaseUrl,
  supabaseKey: supabaseAnonKey,
});

export {supabase};
--------------------------------------------------------------------------------


================================================================================
SECCIÓN: HOOKS
================================================================================


### Archivo: src\app\hooks\useResponsive.jsx ###
--------------------------------------------------------------------------------
// hooks/useResponsive.js
import { useState, useEffect } from 'react';

export const useResponsive = () => {
  const [windowSize, setWindowSize] = useState({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }
    
    handleResize();
    window.addEventListener('resize', handleResize);
    
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return {
    isMobile: windowSize.width < 640,
    isTablet: windowSize.width >= 640 && windowSize.width < 1024,
    isDesktop: windowSize.width >= 1024,
    isLandscape: windowSize.width > windowSize.height,
  };
};


--------------------------------------------------------------------------------


================================================================================
SECCIÓN: OTHER
================================================================================


### Archivo: tailwind.config.ts ###
--------------------------------------------------------------------------------
// tailwind.config.js

module.exports = {
  content: [
    "./app/**/*.{js,jsx}",
    "./src/**/*.{js,jsx}",
    "./pages/**/*.{js,jsx}",
    "./components/**/*.{js,jsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          light: '#a78bfa',
          DEFAULT: '#8b5cf6',
          dark: '#6d28d9',
        },
        secondary: {
          light: '#c084fc',
          DEFAULT: '#a855f7',
          dark: '#9333ea',
        },
        accent: {
          light: '#c4b5fd',
          DEFAULT: '#a78bfa',
          dark: '#8b5cf6',
        },
      },
      fontFamily: {
        metropolis: ['"Metropolis"', 'sans-serif'],
      },
    },
  },
  plugins: [],
}

--------------------------------------------------------------------------------

### Archivo: src\app\layout.jsx ###
--------------------------------------------------------------------------------
// app/layout.jsx

import './globals.css'
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function RootLayout({ children }) {
  return (
    <html lang="es">
      <body className="">
        <main>{children}</main>
        <ToastContainer />
      </body>
    </html>
  );
}

--------------------------------------------------------------------------------

### Archivo: src\app\middleware.jsx ###
--------------------------------------------------------------------------------
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })
  await supabase.auth.getSession()
  return res
}
--------------------------------------------------------------------------------

### Archivo: src\app\page.jsx ###
--------------------------------------------------------------------------------
import Image from "next/image";
import UploadPhoto from "@/app/components/UploadPhoto"
export default function Home() {
  return (
    <main className="min-h-screen w-full relative">
      {/* Background image */}
      <div className="fixed inset-0">
        <Image 
          src="/background.jpg"
          alt="Background"
          fill
          className="object-cover object-center"
          sizes="100vw"
          priority
          quality={85}
        />
        {/* Purple gradient overlay */}
        <div className="absolute inset-0 bg-gradient-to-b from-purple-900/30 to-purple-800/30 backdrop-blur-[2px]" />
      </div>
      
      {/* Content */}
      <div className="relative">
        <UploadPhoto />
      </div>
    </main>
  );
}
--------------------------------------------------------------------------------

### Archivo: src\app\admin\page.jsx ###
# Client Component
--------------------------------------------------------------------------------
// app/admin/page.tsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { supabase } from "../utils/supabaseClient";


const AdminPage = () => {
    const router = useRouter();

    useEffect(() => {
        const fetchSession = async () => {
          const { data: { session } } = await supabase.auth.getSession();
          if (session) {
            router.push('/admin/dashboard')
          } else {
            router.push('/admin/login');
          }
        };
      fetchSession();
    }, [router]);


  return null;
};

export default AdminPage;

--------------------------------------------------------------------------------

### Archivo: src\app\carousel\page.jsx ###
# Client Component
--------------------------------------------------------------------------------
"use client";
import React, { useEffect, useState, useCallback } from "react";
import { useWindowSize } from "@react-hook/window-size";
import { FaExpand, FaCompress } from "react-icons/fa";
import Confetti from "react-confetti";
import { supabase } from "@/app/utils/supabaseClient";
import DeviceCarousel from "@/app/components/DeviceCarousel/DeviceCarousel";
import CommentBubble from "@/app/components/CommentBubble/CommentBubble";
import QRCode from "@/app/components/QRCode";
import { DEVICE_CONFIGS } from "@/app/components/DeviceCarousel/config";
import styles from "./styles.module.css";
import Image from "next/image";

const POLL_INTERVAL = 60000;
const EFFECT_INTERVAL = 1000;
const PARTY_EMOJIS = [
  "❤️",
  "🧡",
  "💛",
  "💚",
  "💙",
  "💜",
  "🎉",
  "🎊",
  "🎈",
  "🥳",
];
const CONFETTI_COLORS = ["#f44336", "#e91e63", "#9c27b0", "#673ab7", "#3f51b5"];

export default function CarouselPage() {
  const [width, height] = useWindowSize();
  const [photos, setPhotos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showFlash, setShowFlash] = useState(false);
  const [floatingItems, setFloatingItems] = useState([]);
  const [confettiActive, setConfettiActive] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [selectedDevice, setSelectedDevice] = useState("iPadMini");
  const [currentComment, setCurrentComment] = useState("");

  // Deshabilitar scroll y manejar fullscreen
  useEffect(() => {
    const disableScroll = () => {
      document.documentElement.style.cssText = `
        overflow: hidden !important;
        height: 100vh;
        width: 100vw;
        position: fixed;
        touch-action: none;
        -webkit-overflow-scrolling: none;
        overscroll-behavior: none;
        margin: 0;
        padding: 0;
      `;
      document.body.style.cssText = document.documentElement.style.cssText;
    };

    const enableScroll = () => {
      document.documentElement.style.cssText = "";
      document.body.style.cssText = "";
    };

    disableScroll();

    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener("fullscreenchange", handleFullscreenChange);

    return () => {
      enableScroll();
      document.removeEventListener("fullscreenchange", handleFullscreenChange);
    };
  }, []);

  // Fetch de fotos y suscripción a cambios
  const fetchPhotos = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from("uploads")
        .select("*")
        .eq("approved", true)
        .order("created_at", { ascending: false });

      if (error) throw error;
      setPhotos(data || []);
    } catch (error) {
      console.error("Error fetching photos:", error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchPhotos();
    const pollInterval = setInterval(fetchPhotos, POLL_INTERVAL);

    const channel = supabase
      .channel("public:uploads")
      .on(
        "postgres_changes",
        {
          event: "*",
          schema: "public",
          table: "uploads",
          filter: "approved=eq.true",
        },
        fetchPhotos
      )
      .subscribe();

    return () => {
      clearInterval(pollInterval);
      supabase.removeChannel(channel);
    };
  }, [fetchPhotos]);

  // Efectos visuales
  const triggerFlash = useCallback(() => {
    setShowFlash(true);
    setTimeout(() => setShowFlash(false), 200);
  }, []);

  const createFloatingItem = useCallback(() => {
    const newItem = {
      id: Date.now(),
      emoji: PARTY_EMOJIS[Math.floor(Math.random() * PARTY_EMOJIS.length)],
      left: `${Math.random() * 100}%`,
      animationDuration: `${2 + Math.random() * 3}s`,
      size: `${1.5 + Math.random() * 1}rem`,
    };

    setFloatingItems((prev) => [...prev, newItem]);
    setTimeout(() => {
      setFloatingItems((prev) => prev.filter((item) => item.id !== newItem.id));
    }, parseFloat(newItem.animationDuration) * 1000);
  }, []);

  useEffect(() => {
    fetchPhotos(); // Fetch inicial
  
    // Configuración del canal de tiempo real
    const channel = supabase
      .channel('upload-changes')
      .on(
        'postgres_changes',
        {
          event: '*', // Escucha todos los eventos (INSERT, UPDATE, DELETE)
          schema: 'public',
          table: 'uploads',
          filter: 'approved=eq.true'
        },
        (payload) => {
          console.log('Cambio detectado:', payload);
          // Actualizar fotos según el tipo de cambio
          if (payload.eventType === 'INSERT') {
            setPhotos(prev => [payload.new, ...prev]);
          } else if (payload.eventType === 'UPDATE') {
            setPhotos(prev => 
              prev.map(photo => 
                photo.id === payload.new.id ? payload.new : photo
              )
            );
          } else if (payload.eventType === 'DELETE') {
            setPhotos(prev => 
              prev.filter(photo => photo.id !== payload.old.id)
            );
          }
        }
      )
      .subscribe();
  
    // Polling como respaldo
    const pollInterval = setInterval(fetchPhotos, POLL_INTERVAL);
  
    return () => {
      clearInterval(pollInterval);
      supabase.removeChannel(channel);
    };
  }, [fetchPhotos]);

  useEffect(() => {
    const effectInterval = setInterval(() => {
      if (Math.random() < 0.8) createFloatingItem();
      if (Math.random() < 0.2) triggerFlash();
    }, EFFECT_INTERVAL);

    const confettiInterval = setInterval(() => {
      setConfettiActive(true);
      setTimeout(() => setConfettiActive(false), 5000);
    }, 30000);

    return () => {
      clearInterval(effectInterval);
      clearInterval(confettiInterval);
    };
  }, [createFloatingItem, triggerFlash]);


  // Toggle fullscreen
  const toggleFullscreen = async () => {
    try {
      if (!isFullscreen) {
        await document.documentElement.requestFullscreen();
      } else {
        await document.exitFullscreen();
      }
    } catch (error) {
      console.error("Error toggling fullscreen:", error);
    }
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-white" />
      </div>
    );
  }

  const handleSlideChange = (currentIndex) => {
    setCurrentComment(photos[currentIndex]?.comment || "");
  };

  return (
    <div className={styles.container}>
      {/* Logo */}
      <div className={styles.logoContainer}>
        <Image
          src="/logo-form.png" // Ajusta la ruta según donde guardes el logo
          alt="Real Meet 2024"
          width={200}
          height={60}
          priority
        />
      </div>
      <CommentBubble  comment={currentComment} />
      {/* Efectos de fondo */}
      <div className={styles.backgroundEffects}>
        <div className={styles.ambientEffect} />
        <div className={styles.starLayer1} />
        <div className={styles.starLayer2} />
        <div
          className={styles.brightStar}
          style={{ top: "15%", left: "20%" }}
        />
        <div
          className={styles.brightStar}
          style={{ top: "25%", right: "30%" }}
        />
        <div
          className={styles.brightStar}
          style={{ bottom: "30%", left: "25%" }}
        />
        <div
          className={styles.brightStar}
          style={{ bottom: "20%", right: "15%" }}
        />
      </div>

      <Confetti
        width={width}
        height={height}
        numberOfPieces={confettiActive ? 200 : 0}
        colors={CONFETTI_COLORS}
        recycle={false}
      />

      {floatingItems.map((item) => (
        <div
          key={item.id}
          className={styles.floatingItem}
          style={{
            left: item.left,
            animationDuration: item.animationDuration,
            fontSize: item.size,
          }}
        >
          {item.emoji}
        </div>
      ))}

      <main className={styles.mainContent}>
        <div className={styles.carouselLayout}>
          <div className={styles.deviceWrapper}>
          <DeviceCarousel
  photos={photos}
  deviceConfig={DEVICE_CONFIGS[selectedDevice]}
  isFullscreen={isFullscreen}
  width={width}
  height={height}
  onSlideChange={(swiper) => handleSlideChange(swiper.realIndex)}
/>

            {/* Elimina la burbuja de comentario de aquí ya que ahora está en DeviceCarousel */}
          </div>
        </div>
      </main>
      <div className="fixed bottom-8 right-8 z-50">
        <Image
          src="/logo-blanco.png"
          alt="Logo empresa"
          width={200}
          height={120}
          className="object-contain opacity-90 hover:opacity-100 transition-opacity"
          priority
        />
      </div>
      {/* Botón de fullscreen reposicionado */}
      <button
        onClick={toggleFullscreen}
        className="fixed top-4 right-4 w-10 h-10 flex items-center justify-center bg-black/40 hover:bg-black/60 text-white rounded-full shadow-xl border border-white/50 transition-all duration-300 z-50"
        aria-label={isFullscreen ? "Exit fullscreen" : "Enter fullscreen"}
      >
        {isFullscreen ? <FaCompress size={18} /> : <FaExpand size={18} />}
      </button>

      <div className="fixed top-20 right-24 z-50">
        <QRCode
          url={process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000"}
        />
      </div>
      {showFlash && <div className={styles.flash} />}
    </div>
  );
}

--------------------------------------------------------------------------------

### Archivo: src\app\admin\dashboard\page.jsx ###
# Client Component
--------------------------------------------------------------------------------
// app/admin/page.jsx
"use client"
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { FaCheck, FaTrash } from 'react-icons/fa';
import { supabase } from '../../utils/supabaseClient';
import { toast } from 'react-toastify';


const AdminPanel = () => {
  const [uploads, setUploads] = useState([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const fetchSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        fetchPendingUploads();
      } else {
        router.push('/admin/login');
      }
    };

    fetchSession();

    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (session) {
          fetchPendingUploads();
        } else {
          setUploads([]);
          router.push('/admin/login');
        }
      }
    );

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const fetchPendingUploads = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('uploads')
      .select('*')
      .eq('approved', false)
      .order('created_at', { ascending: true });
    console.log(data, error)
    if (error) {
      toast.error('Hubo un problema al obtener las fotos pendientes.');
    } else {
      setUploads(data);
    }
    setLoading(false);
  };

  const approveUpload = async (id) => {
    const { error } = await supabase
      .from('uploads')
      .update({ approved: true })
      .eq('id', id);
    console.log(id, error); // Asegúrate de revisar el error
    if (error) {
      console.error('Error al aprobar la foto:', error);
      toast.error('Hubo un problema al aprobar la foto!');
    } else {
      toast.success('Foto aprobada!');
      fetchPendingUploads();
    }
  };

  const deleteUpload = async (id, image_url) => {
    const imagePath = image_url.split('/storage/v1/object/public/photos/')[1];

    const { error: deleteError } = await supabase
      .from('uploads')
      .delete()
      .eq('id', id);

    if (deleteError) {
      console.error('Error al eliminar el registro:', deleteError);
      toast.error('Hubo un problema al eliminar la foto.');
      return;
    }

    const { error: storageError } = await supabase.storage
      .from('photos')
      .remove([imagePath]);

    if (storageError) {
     toast.error(`Error al eliminar la imagen: ${storageError}`);
    } else {
      toast.info('Foto eliminada.');
      fetchPendingUploads();
    }
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    router.push('/admin/login');
  };

  return (
    <main className="min-h-screen text-gray-100 flex flex-col items-center justify-start p-4">
      <div className="w-full max-w-4xl mx-auto bg-gray-800 rounded-lg shadow-md p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Panel de Administración</h1>
          <button
            onClick={handleLogout}
            className="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-md transition"
          >
            Cerrar Sesión
          </button>
        </div>
        {loading ? (
          <p className="text-center">Cargando fotos pendientes...</p>
        ) : uploads.length === 0 ? (
          <p className="text-center">No hay fotos pendientes de aprobación.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {uploads.map((upload) => (
              <div key={upload.id} className="bg-gray-700 rounded-lg overflow-hidden">
                <img src={upload.image_url} alt="Foto pendiente" className="w-full h-48 object-cover" />
                <div className="p-4">
                  <p className="mb-4">{upload.comment || 'Sin comentario'}</p>
                  <div className="flex justify-between">
                    <button
                      onClick={() => approveUpload(upload.id)}
                      className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md transition flex items-center"
                    >
                      <FaCheck className="mr-2" />
                      Aprobar
                    </button>
                    <button
                      onClick={() => deleteUpload(upload.id, upload.image_url)}
                      className="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-md transition flex items-center"
                    >
                      <FaTrash className="mr-2" />
                      Eliminar
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </main>
  );
};

export default AdminPanel;
--------------------------------------------------------------------------------

### Archivo: src\app\admin\login\page.jsx ###
# Client Component
--------------------------------------------------------------------------------
"use client"
import LoginForm from '@/app/components/LoginForm'; 
const AdminLogin = () => {
  return (
    <main className="min-h-screen text-gray-100 flex flex-col items-center justify-center p-4">
      <h1 className="text-3xl font-bold mb-8 text-center">Admin</h1>
      <LoginForm />
    </main>
  );
}

export default AdminLogin
--------------------------------------------------------------------------------


================================================================================
RESUMEN DEL PROYECTO NEXT.JS 14
================================================================================

Total de archivos: 23
Pages: 0
Layouts: 0
Components: 13
API Routes: 0
Hooks: 1
Server Components: 16
Client Components: 7
